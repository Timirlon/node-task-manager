<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <link rel="stylesheet" href="/css/styles.css">
    <style>
        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 20px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            z-index: 1000;
        }
        .modal-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 999;
        }
        .modal.active, .modal-overlay.active {
            display: block;
        }
    </style>
</head>
<body>
    <%- include('partials/header') %>

    <div class="container">
        <h1>Dashboard</h1>
        <h2>Welcome, <%= user.name %>!</h2>

        <!-- Display Users (Admin Only) -->
        <% if (currentUser.role === 'admin') { %>
            <h3>Users</h3>
            <ul id="userList">
                <% users.forEach(user => { %>
                    <li>
                        <%= user.name %> (<%= user.email %>) - <%= user.role %>
                        <button onclick="editUser('<%= user._id %>')">Edit</button>
                        <button onclick="deleteUser('<%= user._id %>')">Delete</button>
                    </li>
                <% }) %>
            </ul>
        <% } %>

        <!-- Display Tasks -->
        <h3>Tasks</h3>
        <ul id="taskList">
            <% tasks.forEach(task => { %>
                <li>
                    <%= task.description %> - <%= task.completed ? 'Completed' : 'Pending' %>
                    <br>
                    <small>Owner: <%= task.owner ? task.owner.email : 'Unknown' %></small>
                    <% if (currentUser.role === 'admin') { %>
                        <button onclick="editTask('<%= task._id %>')">Edit</button>
                        <button onclick="deleteTask('<%= task._id %>')">Delete</button>
                    <% } %>
                </li>
            <% }) %>
        </ul>

        <!-- Add Task Form -->
        <h3>Add Task</h3>
<form id="addTaskForm">
    <label for="description">Description:</label>
    <input type="text" id="description" name="description" required>

    <label for="status">Status:</label>
    <select id="status" name="status" required>
        <option value="created">Created</option>
        <option value="in progress">In Progress</option>
        <option value="done">Done</option>
    </select>

    <button type="submit">Add Task</button>
</form>
    </div>

    <!-- Edit Task Modal -->
    <div id="editTaskModal" class="modal">
        <h3>Edit Task</h3>
        <form id="editTaskForm">
            <input type="hidden" id="editTaskId" name="id">
            <label for="editDescription">Description:</label>
            <input type="text" id="editDescription" name="description" required>
    
            <label for="editStatus">Status:</label>
            <select id="editStatus" name="status" required>
                <option value="created">Created</option>
                <option value="in progress">In Progress</option>
                <option value="done">Done</option>
            </select>
    
            <button type="submit">Save Changes</button>
            <button type="button" onclick="closeEditTaskModal()">Cancel</button>
        </form>
    </div>
    <div id="editTaskModalOverlay" class="modal-overlay"></div>

    <!-- Edit User Modal -->
    <div id="editUserModal" class="modal">
        <h3>Edit User</h3>
        <form id="editUserForm">
            <input type="hidden" id="editUserId" name="id">
            <label for="editName">Name:</label>
            <input type="text" id="editName" name="name" required>

            <label for="editEmail">Email:</label>
            <input type="email" id="editEmail" name="email" required>

            <label for="editRole">Role:</label>
            <select id="editRole" name="role">
                <option value="user">User</option>
                <option value="admin">Admin</option>
            </select>

            <button type="submit">Save Changes</button>
            <button type="button" onclick="closeEditUserModal()">Cancel</button>
        </form>
    </div>
    <div id="editUserModalOverlay" class="modal-overlay"></div>

    <%- include('partials/footer') %>

    <script>
        // Add task form submission
        document.getElementById('addTaskForm')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    const data = Object.fromEntries(formData.entries());

    const response = await fetch('/tasks', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
        credentials: 'include',
    });

    const result = await response.json();
    if (response.ok) {
        alert('Task added successfully!');
        window.location.reload();
    } else {
        alert(result.error || 'Failed to add task');
    }
});

        // Open Edit Task Modal
        function editTask(taskId) {
    if (!taskId) {
        alert('Task ID is missing');
        return;
    }

    fetch(`/tasks/${taskId}`, {
        credentials: 'include',
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to fetch task details');
        }
        return response.json();
    })
    .then(data => {
        if (!data.task) {
            throw new Error('Task not found');
        }
        const task = data.task;
        document.getElementById('editTaskId').value = task._id;
        document.getElementById('editDescription').value = task.description;
        document.getElementById('editStatus').value = task.status; // Set the status
        document.getElementById('editTaskModal').classList.add('active');
        document.getElementById('editTaskModalOverlay').classList.add('active');
    })
    .catch(error => {
        alert(error.message);
    });
}

        // Close Edit Task Modal
        function closeEditTaskModal() {
            document.getElementById('editTaskModal').classList.remove('active');
            document.getElementById('editTaskModalOverlay').classList.remove('active');
        }

        // Submit Edit Task Form
        document.getElementById('editTaskForm')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    const data = Object.fromEntries(formData.entries());

    const response = await fetch(`/tasks/${data.id}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
        credentials: 'include',
    });

    const result = await response.json();
    if (response.ok) {
        alert('Task updated successfully!');
        window.location.reload();
    } else {
        alert(result.error || 'Failed to update task');
    }
});

        // Open Edit User Modal
        function editUser(userId) {
    if (!userId) {
        alert('User ID is missing');
        return;
    }

    fetch(`/users/${userId}`, {
        credentials: 'include',
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to fetch user details');
        }
        return response.json();
    })
    .then(data => {
        if (!data.user) {
            throw new Error('User not found');
        }
        const user = data.user;
        document.getElementById('editUserId').value = user._id;
        document.getElementById('editName').value = user.name;
        document.getElementById('editEmail').value = user.email;
        document.getElementById('editRole').value = user.role;
        document.getElementById('editUserModal').classList.add('active');
        document.getElementById('editUserModalOverlay').classList.add('active');
    })
    .catch(error => {
        alert(error.message);
    });
}

        // Close Edit User Modal
        function closeEditUserModal() {
            document.getElementById('editUserModal').classList.remove('active');
            document.getElementById('editUserModalOverlay').classList.remove('active');
        }

        // Submit Edit User Form
        document.getElementById('editUserForm')?.addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(e.target);
            const data = Object.fromEntries(formData.entries());

            const response = await fetch(`/users/${data.id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data),
                credentials: 'include',
            });

            const result = await response.json();
            if (response.ok) {
                alert('User updated successfully!');
                window.location.reload();
            } else {
                alert(result.error || 'Failed to update user');
            }
        });

        // Delete User
        function deleteUser(userId) {
            if (confirm('Are you sure you want to delete this user?')) {
                fetch(`/users/${userId}`, {
                    method: 'DELETE',
                    credentials: 'include',
                })
                .then(response => response.json())
                .then(result => {
                    if (result.message) {
                        alert(result.message);
                        window.location.reload();
                    } else {
                        alert(result.error || 'Failed to delete user');
                    }
                });
            }
        }

        // Delete Task
        function deleteTask(taskId) {
            if (confirm('Are you sure you want to delete this task?')) {
                fetch(`/tasks/${taskId}`, {
                    method: 'DELETE',
                    credentials: 'include',
                })
                .then(response => response.json())
                .then(result => {
                    if (result.message) {
                        alert(result.message);
                        window.location.reload();
                    } else {
                        alert(result.error || 'Failed to delete task');
                    }
                });
            }
        }
    </script>
</body>
</html>